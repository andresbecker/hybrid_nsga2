#include <stdio.h> 
#include <stdlib.h> 
#include<math.h>

# define P 2
# define R 0.5

/*VARIABLES GLOBALES*/
/*Arreglos bidimencionales*/
double **pareto, **datos;
int pareto_size, pop_size;

/*FUNCIONES*/

double gd();
double igd();
double distancia_euclidiana();

int main(int argc, char **argv)
{
    FILE *fp_pareto, *fp_datos;
    
    int i, j, k;
    double gd_pareto, igd_pareto;
    char frente_pareto[30], frente_aprox[30];
    
    if (argc<2)
    {
        printf("\n Escribe './h pareto_size' donde pareto_size es # de ptos en el frente \n");
        exit(1);
    }
    pareto_size = (int)atof(argv[1]);
    
    scanf("%d", &pop_size);
    scanf("%s", frente_pareto);
    scanf("%s", frente_aprox);

    fp_pareto = fopen (frente_pareto, "r");
    if (fp_pareto==NULL)
    {
	fputs ("ERROR, no se pudo abrir el archivo del frente de pareto\n",stderr);
	return 0;
    }
    fp_datos = fopen (frente_aprox, "r");
    if (fp_datos==NULL)
    {
	fputs ("ERROR, no se pudo abrir el archivo del frente aprox\n",stderr);
	return 0;
    }
    
    /*Reservamos memoria para arreglos bidimencionales*/
    pareto = (double**)malloc(pareto_size*sizeof(double));
    for(i=0; i<pareto_size; i++)
    {
        pareto[i]=(double*)malloc(2*sizeof(double));
    }
    datos = (double**)malloc(pop_size*sizeof(double));
    for(i=0; i<pop_size; i++)
    {
        datos[i]=(double*)malloc(2*sizeof(double));
    }
    
    //Inicializamos lor arreglos
    for(i=0; i<pareto_size; i++)
        for(j=0; j<2; j++)
            pareto[i][j]=0.0;

    for(i=0; i<pop_size; i++)
       for(j=0; j<2; j++)
            datos[i][j]=0.0;

    //COPIAMOS DEL ARCHIVO A LOS ARREGLOS
    for(i=0; i<pareto_size; i++)
        fscanf(fp_pareto, "%lf %lf", &pareto[i][0], &pareto[i][1]);

    for(i=0; i<pop_size; i++)
        fscanf(fp_datos, "%lf %lf", &datos[i][0], &datos[i][1]);

    //CALCULAMOS DISTANCIAS
    gd_pareto=gd();
    igd_pareto=igd();
    
    //IMPRIMIMOS
    printf("%e %e\n", gd_pareto, igd_pareto);
    
    
    fclose (fp_pareto); fclose (fp_datos);
    
    for(i=0; i<pareto_size; i++)
    {
        free(pareto[i]);
    }
    free(pareto);
    for(i=0; i<pop_size; i++)
    {
        free(datos[i]);
    }
    free(datos);
    
    return 0;
}

double gd()
{
    int i, j;
    double d, inf, sum, gd_pareto;
    
    sum=0; 
    for(j=0; j<pop_size; j++)
    {
        inf=distancia_euclidiana(j,0);
        for(i=1; i<pareto_size; i++)
        {
            d=distancia_euclidiana(j,i);
            if(d<inf)
                inf=d;
        }
        sum=sum+pow(inf,P);
    }
    gd_pareto=pow(sum,R)/pop_size;
    
    return gd_pareto;
}

double igd()
{
    int i, j;
    double d, inf, sum, igd_pareto;
    
    sum=0;
    for(j=0; j<pareto_size; j++)
    {
        inf=distancia_euclidiana(0,j);
        for(i=1; i<pop_size; i++)
        {
            d=distancia_euclidiana(i, j);
            if(d<inf)
                inf=d;
        }
        sum=sum+pow(inf,P);
    }
    igd_pareto=pow(sum,R)/pareto_size;
    
    return igd_pareto;
}

double distancia_euclidiana(int dato, int paret)
{

    double d;
    int i;
    
    d=0;
    
    for(i=0; i<2; i++)
    {
        d=d+pow(datos[dato][i]-pareto[paret][i],2);
    }
    
    d=sqrt(d);
    
    return d;
}
